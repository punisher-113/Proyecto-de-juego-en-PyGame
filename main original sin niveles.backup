import pygame, random

##Dimensiones Pantalla
from pygame.mixer import SoundType

WIDTH = 1024
HEIGHT = 600

##Colores en RGB
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
PURPLE = (255, 0, 255)

pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Shooter")
clock = pygame.time.Clock()


# Texto En pantalla
def draw_text(surface, text, size, x, y):
    font = pygame.font.SysFont("serif", size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (int(x), int(y))
    surface.blit(text_surface, text_rect)


# Barra de escudo
def draw_shield_bar(surface, x, y, percentage):
    BAR_LENGHT = 100
    BAR_HEIGHT = 10
    fill = (percentage / 100) * BAR_LENGHT
    border = pygame.Rect(x, y, BAR_LENGHT, BAR_HEIGHT)
    fill = pygame.Rect(int(x), int(y), int(fill), BAR_HEIGHT)
    pygame.draw.rect(surface, GREEN, fill)
    pygame.draw.rect(surface, WHITE, border, 2)




#####################-SONIDOS INICIO-#####################
##Musica de fondo
##sound1 = pygame.mixer.Sound("quake_1.ogg")
sound1: SoundType = pygame.mixer.Sound("musica/musica_3.ogg")

volumen = (0.8)
sound1.set_volume(volumen)
sound1.play()


##Sonido Disparo

laser_sound = pygame.mixer.Sound("musica/disparo.ogg")
volumen_laser = (0.5)
laser_sound.set_volume(volumen_laser)

##Sonido Explosion meteoro
meteor_sound = pygame.mixer.Sound("musica/explosionmeteoro.wav")

##Sonido Explosion enemigo
enemy_sound = pygame.mixer.Sound("musica/explosionave.wav")

##Sonido DaÃ±o

damage = pygame.mixer.Sound("musica/damage.wav")

##Sonido GameOver

goverSound = pygame.mixer.Sound("musica/gameover.wav")


#####################-SONIDOS FIN-#########################


##GameOver en pantalla


def show_gameover_screen():
    draw_text(screen, "Proyecto Juego", 65, WIDTH // 2, HEIGHT // 4)
    draw_text(screen, "Empezar el juego", 27, WIDTH // 2, HEIGHT // 2)
    draw_text(screen, "Presiona una tecla", 20, WIDTH // 2, HEIGHT * 3 / 4)
    pygame.display.flip()
    waiting = True
    while waiting:
        clock.tick(60)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False


## Pausa...
def pausa():
    pausado = True

    while pausado:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    pausado = False
                elif event.key == pygame.K_q:
                    pygame.quit()
                    quit()

        screen.fill(BLACK)
        pygame.display.update()
        draw_text(screen, "Pausa", 65, WIDTH // 2, HEIGHT // 4)
        sound1.set_volume(0)  # corta la muscica de fondo
        draw_text(screen, "Tocar C para continuar o Q para quitar", 27, WIDTH // 2, HEIGHT // 2)
        pygame.display.flip()
        clock.tick(5)

    sound1.set_volume(volumen)


#####################-IMAGENES INICIO-#####################

##Fondo de pantalla, usa imagenes de la carpeta raiz
background = pygame.image.load("assets/fondo/fondo2.jpg").convert()

##introduccion de sprites Player y redimencionar
playersprite = pygame.image.load("assets/player/playership.jpg").convert()
playersprite = pygame.transform.scale(playersprite, (65, 65))

##introduccion de sprites PlayerShot y redimencionar
playershot = pygame.image.load("assets/player/playershot1.jpg").convert()
playershot = pygame.transform.scale(playershot, (60, 60))

##introduccion de sprites Meteoro y redimencionar
meteorsprite = pygame.image.load("assets/meteor/meteor1.jpg").convert()
meteorsprite = pygame.transform.scale(meteorsprite, (55, 55))

##introduccion de sprites Meteoro y redimencionar
shipenemy = pygame.image.load("assets/enemy/shipenemy.jpg").convert()
shipenemy = pygame.transform.scale(shipenemy, (55, 55))

##Explosiones
explode = pygame.image.load("assets/enemy/enemyexplode.jpg").convert()
explode = pygame.transform.scale(explode, (55, 55))

#####################-IMAGENES FIN-#########################

##Estrellas
##generamos posiciones aleatorias en la pantalla y las guardamos
coor_list = []
for i in range(60):
    x = random.randint(0, WIDTH)
    y = random.randint(0, HEIGHT)
    coor_list.append([x, y])


#####################-CLASES Inicio-#########################

class Explosion(pygame.sprite.Sprite):
    def __init__(self, center):
        super().__init__()
        self.image = explode
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 50

    def update(self):
        now = pygame.time.get_ticks()


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = playersprite
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = WIDTH // 2
        self.rect.bottom = HEIGHT - 10
        self.speed_x = 0
        ##Vida del personaje
        self.live = 100

    def update(self):
        self.speed_x = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_a] or keystate[pygame.K_LEFT]:
            self.speed_x = -5
        if keystate[pygame.K_d] or keystate[pygame.K_RIGHT]:
            self.speed_x = 5
        self.rect.x += self.speed_x
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0

    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)
        laser_sound.play()


##Clase balas (Jugador)

class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = playershot
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.centerx = x
        self.speedy = -10
        self.damage = 10

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom < 0:
            self.kill()


##Clase Meteoro

class Meteor(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = meteorsprite
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(WIDTH - self.rect.width)
        self.rect.y = random.randrange(-100, -40)
        self.speedy = random.randrange(1, 10)
        self.speedx = random.randrange(-5, 5)
        self.live = 30

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.top > HEIGHT + 10 or self.rect.left < -25 or self.rect.right > WIDTH + 22:
            self.rect.x = random.randrange(WIDTH - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(1, 3)


##Clase enemigo

class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = shipenemy
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(WIDTH - self.rect.width)
        self.rect.y = random.randrange(-100, -40)
        self.speedy = random.randrange(1, 10)
        self.speedx = random.randrange(-5, 5)
        self.live = 30

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if self.rect.top > HEIGHT + 10 or self.rect.left < -25 or self.rect.right > WIDTH + 22:
            self.rect.x = random.randrange(WIDTH - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(1, 5)


#####################-CLASES FIN-#########################


#####################-Procesamiento de Sprites Inicio-#########################


##Listas de los sprites
all_sprites = pygame.sprite.Group()

##Lista de meteors
meteor_list = pygame.sprite.Group()
##Lista de bullets
bullets = pygame.sprite.Group()

##Lista Enemigos
enemy_list = pygame.sprite.Group()

player = Player()
all_sprites.add(player)

# Creacion de meteors el range cambia la cantidad
for i in range(4):
    meteor = Meteor()
    all_sprites.add(meteor)
    meteor_list.add(meteor)

# Creacion de enemigos el range cambia la cantidad
for i in range(8):
    enemy = Enemy()
    all_sprites.add(enemy)
    enemy_list.add(enemy)

##Score
score = 0

# Game Loop
##Game over
game_over = True
running = True

while running:

    ##Game over
    if game_over:
        show_gameover_screen()
        game_over = False
        ##Listas de los sprites
        all_sprites = pygame.sprite.Group()
        ##Lista de meteors
        meteor_list = pygame.sprite.Group()
        ##Lista de bullets
        bullets = pygame.sprite.Group()
        ##Lista Enemigos
        enemy_list = pygame.sprite.Group()
        player = Player()
        all_sprites.add(player)
        # Creacion de meteors el range cambia la cantidad
        for i in range(4):
            meteor = Meteor()
            all_sprites.add(meteor)
            meteor_list.add(meteor)
        # Creacion de enemigos el range cambia la cantidad
        for i in range(8):
            enemy = Enemy()
            all_sprites.add(enemy)
            enemy_list.add(enemy)
        ##Score
        score = 0





    # Keep loop running at the right speed
    clock.tick(60)



    # Process input (events)
    for event in pygame.event.get():
        # check for closing window
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:
            if  event.key == pygame.K_ESCAPE:
                pausa()

            if event.key == pygame.K_SPACE:
                player.shoot()

            ##Volumen Musica -
            if event.key == pygame.K_DOWN:
                volumen -= 0.10
                sound1.set_volume(volumen)

            ##Volumen Musica +
            if event.key == pygame.K_UP:
                volumen += 0.10
                if volumen == 1:
                    volumen = 1.0
                else:
                    sound1.set_volume(volumen)



    ##print(f"Volumen de la musica {volumen}")
    # Update
    all_sprites.update()

    # Colisiones meteoro - laser
    hits = pygame.sprite.groupcollide(meteor_list, bullets, True, True)
    for hit in hits:
        score += 10
        meteor_sound.play()
        meteor = Meteor()
        all_sprites.add(meteor)
        meteor_list.add(meteor)

    # Colisiones Enemigo - laser
    hits = pygame.sprite.groupcollide(enemy_list, bullets, True, True)
    for hit in hits:
        score += 50
        enemy_sound.play()
        enemy = Enemy()
        all_sprites.add(enemy)
        enemy_list.add(enemy)

    # Colisiones Meteoro Con nave
    hits = pygame.sprite.spritecollide(player, meteor_list, True)
    for hit in hits:
        player.live -= 25
        if player.live <= 0:
            game_over = True

    # Colisiones Enemigo Con nave
    hits = pygame.sprite.spritecollide(player, enemy_list, True)
    if hits:
        player.live -= 25
        damage.play()
        if player.live <= 0:
            goverSound.play()
            game_over = True

    # Dibujar en pantalla
    screen.blit(background, [0, 0])
    ##Mostrar estrellas

    ##Estrellas
    for coord in coor_list:
        x = coord[0]
        y = coord[1]

        pygame.draw.circle(screen, WHITE, coord, 1)
        coord[1] += 1  ##Y+1
        if coord[1] > 500:
            coord[1] = 0
    ##Estrellas Fin

    ##Mostrar Sprites
    all_sprites.draw(screen)

    ##Score
    draw_text(screen, f"Puntuacion: {str(score)}", 25, WIDTH / 2, 10)
    ##draw_text(screen,(f"Salud %{str(player.live)}"),20,70,10)
    ##Barra de salud
    draw_shield_bar(screen, 5, 5, player.live)

    pygame.display.flip()

pygame.quit()
